#!/bin/bash

# Aller au r√©pertoire parent (sortir de `tools/`)
cd "$(dirname "$0")/.." || exit

# Demander le nom du projet
read -p "Entrez le nom du projet : " PROJECT_NAME

# V√©rifier si un nom a √©t√© entr√©
if [ -z "$PROJECT_NAME" ]; then
  echo "‚ùå Erreur : Vous devez entrer un nom de projet."
  exit 1
fi

# Suppression compl√®te des conteneurs li√©s au projet
echo "üõë Suppression compl√®te des conteneurs Docker existants pour le projet '$PROJECT_NAME'..."
docker compose -f "$PROJECT_NAME/docker-compose.yml" down --remove-orphans 2>/dev/null || true
docker rm -f $(docker ps -aq --filter "name=${PROJECT_NAME}_") 2>/dev/null || true
echo "‚úÖ Conteneurs supprim√©s."

# Liste des r√©pertoires √† cr√©er (hors Docker)
DIRS=(
  "$PROJECT_NAME/src/Domain/Model"
  "$PROJECT_NAME/src/Domain/Repository"
  "$PROJECT_NAME/src/Application"
  "$PROJECT_NAME/src/Infrastructure/Persistence"
  "$PROJECT_NAME/src/Infrastructure/Http"
  "$PROJECT_NAME/config"
  "$PROJECT_NAME/public"
  "$PROJECT_NAME/docker/php"
)

# Cr√©ation des r√©pertoires uniquement s'ils n'existent pas
echo "üöÄ Cr√©ation de la structure du projet : $PROJECT_NAME..."
for DIR in "${DIRS[@]}"; do
  if [ ! -d "$DIR" ]; then
    mkdir -p "$DIR"
    echo "üìÅ Dossier cr√©√© : $DIR"
  else
    echo "‚ö†Ô∏è Le dossier $DIR existe d√©j√†."
  fi
done

############################INDEX.PHP###############################
echo "üìù Cr√©ation du fichier index.php de d√©monstration..."
# Cr√©ation de la page index.php de d√©monstration avec le nom du projet dynamique
cat <<EOL > "$PROJECT_NAME/public/index.php"
<?php
declare(strict_types=1);

\$projectName = getenv('PROJECT_NAME') ?: '$PROJECT_NAME';

\$databaseConfig = [
    'host' => getenv('MYSQL_HOST') ?: 'mysql',
    'dbname' => getenv('MYSQL_DATABASE') ?: 'app_db',
    'user' => getenv('MYSQL_USER') ?: 'user',
    'password' => getenv('MYSQL_PASSWORD') ?: 'password',
];

function checkDatabaseConnection(\$config): string {
    try {
        \$dsn = "mysql:host={\$config['host']};dbname={\$config['dbname']};charset=utf8mb4";
        \$pdo = new PDO(\$dsn, \$config['user'], \$config['password'], [
            PDO::ATTR_ERRMODE => PDO::ERRMODE_EXCEPTION,
            PDO::ATTR_DEFAULT_FETCH_MODE => PDO::FETCH_ASSOC
        ]);
        return "<span style='color:green;'>‚úÖ Connexion √† MySQL r√©ussie !</span>";
    } catch (PDOException \$e) {
        return "<span style='color:red;'>‚ùå Erreur MySQL : " . \$e->getMessage() . "</span>";
    }
}
?>
<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Bienvenue sur <?= htmlspecialchars(\$projectName) ?></title>
    <style>
        body { font-family: Arial, sans-serif; text-align: center; padding: 50px; background-color: #f4f4f4; }
        h1 { color: #333; }
        .container { background: white; padding: 20px; border-radius: 10px; box-shadow: 0 0 10px rgba(0,0,0,0.1); display: inline-block; }
        .status { font-size: 1.2em; margin-top: 10px; }
    </style>
</head>
<body>
    <div class="container">
        <h1>üöÄ Bienvenue sur <?= htmlspecialchars(\$projectName) ?> !</h1>
        <p>Votre environnement PHP, MySQL et Nginx fonctionne correctement.</p>
        <div class="status">
            <?= checkDatabaseConnection(\$databaseConfig); ?>
        </div>
    </div>
</body>
</html>
EOL
echo "‚úÖ Page index.php de d√©monstration cr√©√©e avec le nom du projet : $PROJECT_NAME"
####################################################################

############################SERVICE SELECTION#######################
# Demande des conteneurs √† activer
echo "Quels conteneurs Docker souhaitez-vous mettre en place ?"
while true; do
  read -p "[y/n] Activer Nginx ? [Y] " USE_NGINX
  USE_NGINX=${USE_NGINX:-"y"}
  [[ "$USE_NGINX" =~ ^[YyNn]$ ]] && break
done

while true; do
  read -p "[y/n] Activer MySQL ? [Y] " USE_MYSQL
  USE_MYSQL=${USE_MYSQL:-"y"}
  [[ "$USE_MYSQL" =~ ^[YyNn]$ ]] && break
done

while true; do
  read -p "[y/n] Activer Redis (non recommand√© sans modification syst√®me) ? [N] " USE_REDIS
  USE_REDIS=${USE_REDIS:-"n"}
  [[ "$USE_REDIS" =~ ^[YyNn]$ ]] && break
done
####################################################################


# Affecter les valeurs par d√©faut si l'utilisateur n'a pas r√©pondu
USE_NGINX=${USE_NGINX:-"y"}
USE_MYSQL=${USE_MYSQL:-"y"}
USE_REDIS=${USE_REDIS:-"n"}

# G√©n√©ration dynamique du docker-compose.yml
COMPOSE_FILE="$PROJECT_NAME/docker-compose.yml"
# Cr√©ation du fichier docker-compose.yml
echo "version: '3.8'" > "$COMPOSE_FILE"
echo "" >> "$COMPOSE_FILE"
echo "services:" >> "$COMPOSE_FILE"

# Si MySQL est activ√©, demander les informations
if [[ "$USE_MYSQL" =~ ^[Yy]$ ]]; then
  read -p "Entrez le nom de l'utilisateur MySQL : " MYSQL_USER
  read -sp "Entrez le mot de passe MySQL : " MYSQL_PASSWORD
  echo ""
  read -p "Entrez le nom de la base de donn√©es MySQL : " MYSQL_DATABASE

  # Valeurs par d√©faut si l'utilisateur ne remplit pas
  MYSQL_USER=${MYSQL_USER:-"user"}
  MYSQL_PASSWORD=${MYSQL_PASSWORD:-"password"}
  MYSQL_DATABASE=${MYSQL_DATABASE:-"app_db"}
fi

# Si l'utilisateur active Redis, afficher un message informatif
if [[ "$USE_REDIS" =~ ^[Yy]$ ]]; then
  echo ""
  echo "‚ö†Ô∏è  ATTENTION : Redis n√©cessite une modification du noyau de la machine h√¥te pour √©viter des erreurs de m√©moire."
  echo "üöÄ  Vous devez ex√©cuter les commandes suivantes sur votre machine h√¥te avant de d√©marrer Redis :"
  echo ""
  echo "    sudo bash -c 'echo \"vm.overcommit_memory = 1\" >> /etc/sysctl.conf'"
  echo "    sudo sysctl -w vm.overcommit_memory=1"
  echo ""
  echo "üìå  Sans cette modification, Redis pourrait planter ou ne pas sauvegarder correctement les donn√©es."
  echo "‚ùå  Si vous ne souhaitez pas modifier votre machine h√¥te, r√©pondez 'n' √† l'activation de Redis."
  echo ""

  # Cr√©ation du fichier de configuration Redis si Redis est activ√©
  mkdir -p "$PROJECT_NAME/docker/redis"
  echo "vm.overcommit_memory = 1" > "$PROJECT_NAME/docker/redis/redis.conf"
  echo "‚úÖ Fichier de configuration Redis cr√©√© avec 'vm.overcommit_memory = 1'."

  # Cr√©ation du service Redis dans le docker-compose.yml
  ####################REDIS SERVICE############################
  cat <<EOL >> "$COMPOSE_FILE"
  redis:
    image: redis:latest
    container_name: ${PROJECT_NAME}_redis
    ports:
      - "6379:6379"
    volumes:
      - ./docker/redis/redis.conf:/usr/local/etc/redis/redis.conf
    command: ["redis-server", "/usr/local/etc/redis/redis.conf"]
    networks:
      - app_network
EOL
fi

# Si Nginx est activ√©, cr√©ation du fichier de configuration par d√©faut
if [[ "$USE_NGINX" =~ ^[Yy]$ ]]; then
  mkdir -p "$PROJECT_NAME/docker/nginx"
  echo "‚úÖ Dossier Nginx cr√©√©."
  # Cr√©ation du fichier de configuration Nginx
  echo "Cr√©ation du fichier de configuration Nginx..."
  cat <<EOL > "$PROJECT_NAME/docker/nginx/default.conf"
server {
    listen 80;
    server_name localhost;

    root /var/www/html/public;
    index index.php index.html index.htm;

    location / {
        try_files \$uri /index.php\$is_args\$args;
    }

    location ~ \.php$ {
        include fastcgi_params;
        fastcgi_pass php:9000;
        fastcgi_index index.php;
        fastcgi_param SCRIPT_FILENAME \$document_root\$fastcgi_script_name;
    }

    error_log  /var/log/nginx/error.log warn;
    access_log /var/log/nginx/access.log main;
}
EOL

  echo "‚úÖ Fichier de configuration Nginx cr√©√©."
  # Cr√©ation du service Nginx dans le docker-compose.yml
  ####################NGINX SERVICE############################
  cat <<EOL >> "$COMPOSE_FILE"
  nginx:
    image: nginx:latest
    container_name: ${PROJECT_NAME}_nginx
    ports:
      - "8080:80"
    volumes:
      - ./public:/var/www/html/public
      - ./docker/nginx/default.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - php
    networks:
      - app_network

EOL
fi
############################MYSQL###############################
if [[ "$USE_MYSQL" =~ ^[Yy]$ ]]; then
  cat <<EOL >> "$COMPOSE_FILE"
  mysql:
    image: mysql:8
    container_name: ${PROJECT_NAME}_mysql
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: $MYSQL_PASSWORD
      MYSQL_DATABASE: $MYSQL_DATABASE
      MYSQL_USER: $MYSQL_USER
      MYSQL_PASSWORD: $MYSQL_PASSWORD
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
    networks:
      - app_network

EOL
fi



# Cr√©ation du Dockerfile PHP
cat <<EOL > "$PROJECT_NAME/docker/php/Dockerfile"
FROM php:8.2-fpm

RUN apt-get update && apt-get install -y \
    git \
    unzip \
    libpq-dev \
    libonig-dev \
    libxml2-dev \
    && docker-php-ext-install pdo_mysql xml

RUN docker-php-ext-enable pdo_mysql xml

COPY --from=composer:latest /usr/bin/composer /usr/bin/composer

WORKDIR /var/www/html

EOL

echo "‚úÖ Fichier Dockerfile cr√©√© pour PHP."
####################PHP SERVICE############################
cat <<EOL >> "$COMPOSE_FILE"
  php:
    build:
      context: ./docker/php
      args:
        FRAMEWORK: "none"
    container_name: ${PROJECT_NAME}_php
    volumes:
      - ./:/var/www/html
    environment:
      - APP_ENV=dev
    networks:
      - app_network
EOL
if [[ "$USE_MYSQL" =~ ^[Yy]$ ]]; then
  echo "    depends_on:" >> "$COMPOSE_FILE"
  echo "      - mysql" >> "$COMPOSE_FILE"
fi
############################NETWORKS############################
echo "networks:" >> "$COMPOSE_FILE"
echo "  app_network:" >> "$COMPOSE_FILE"
echo "" >> "$COMPOSE_FILE"
############################MYSQL###############################
if [[ "$USE_MYSQL" =~ ^[Yy]$ ]]; then
  echo "volumes:" >> "$COMPOSE_FILE"
  echo "  mysql_data:" >> "$COMPOSE_FILE"
fi

echo "‚úÖ Docker-compose.yml g√©n√©r√© avec les services s√©lectionn√©s."

# V√©rifier la pr√©sence de Composer
if ! command -v composer &> /dev/null; then
    echo "‚ùå Erreur : Composer n'est pas install√© sur votre machine."
    echo "üí° Installez Composer avec : https://getcomposer.org/download/"
    exit 1
fi

# S√©lection du framework (avec option "Aucun")
echo "Quel framework souhaitez-vous utiliser ?"
select FRAMEWORK in "Symfony" "Laravel" "Aucun"; do
  case $FRAMEWORK in
    Symfony )
      FRAMEWORK_ARG="symfony"
      break;;
    Laravel )
      FRAMEWORK_ARG="laravel"
      break;;
    Aucun )
      FRAMEWORK_ARG=""
      break;;
    * )
      echo "‚ùå Choix invalide, veuillez s√©lectionner 1 (Symfony), 2 (Laravel) ou 3 (Aucun).";;
  esac
done

# V√©rifier si le dossier du framework est vide
if [ ! -d "$PROJECT_NAME/src/Infrastructure/Http/vendor" ]; then
  echo "üì• Installation du framework en local avant de lancer Docker..."
  if [ "$FRAMEWORK_ARG" = "symfony" ]; then
    composer create-project symfony/skeleton "$PROJECT_NAME/src/Infrastructure/Http/"
  elif [ "$FRAMEWORK_ARG" = "laravel" ]; then
    composer create-project --prefer-dist laravel/laravel "$PROJECT_NAME/src/Infrastructure/Http/"
  fi
  # V√©rification de l'installation r√©ussie
  if [ ! -d "$PROJECT_NAME/src/Infrastructure/Http/vendor" ]; then
    echo "‚ùå Erreur lors de l'installation de $FRAMEWORK_ARG. V√©rifiez votre connexion internet ou les permissions."
    exit 1
  fi
  echo "‚úÖ $FRAMEWORK_ARG install√© avec succ√®s."
else
  echo "‚ö†Ô∏è Aucun framework install√©."
fi

# Ouvrir le r√©pertoire du projet
echo "üìÇ Ouvrir le r√©pertoire du projet '$PROJECT_NAME'..."
cd "$PROJECT_NAME" || exit
if [ -z "$FRAMEWORK_ARG" ]; then
  echo "‚ùå Aucun framework s√©lectionn√©, annulation du build."
  exit 1
fi

# Passer l'argument FRAMEWORK au build Docker
echo "üöÄ Construction de l'image PHP avec $FRAMEWORK_ARG..."
docker compose build --build-arg FRAMEWORK="$FRAMEWORK_ARG"

# D√©marrer les conteneurs
echo "üöÄ D√©marrage des conteneurs Docker..."
docker compose up -d
# V√©rification si les conteneurs sont bien lanc√©s
if ! docker ps --format "{{.Names}}" | grep -q "${PROJECT_NAME}_php"; then
  echo "‚ùå Erreur : Le conteneur PHP ne semble pas d√©marr√©. V√©rifiez les logs avec 'docker compose logs'."
  exit 1
fi
echo "‚úÖ Structure du projet '$PROJECT_NAME' cr√©√©e avec succ√®s !"

# Ouvrir le navigateur
echo "üåê Ouvrir le navigateur pour acc√©der √† http://localhost:8080..."
